// Copyright 2018 Istio Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// THIS FILE IS AUTOMATICALLY GENERATED.

package server

import (
	"context"
	"fmt"
	"net"
	"sync"

	proto "github.com/gogo/protobuf/types"
	"google.golang.org/grpc"
	adptModel "istio.io/api/mixer/adapter/model/v1beta1"
	"istio.io/api/policy/v1beta1"
	"istio.io/istio/mixer/pkg/adapter"
	"istio.io/istio/mixer/pkg/pool"
	"istio.io/istio/mixer/pkg/runtime/handler"
	"istio.io/istio/mixer/tools/mixgen/cmd/testdata/check"
	"istio.io/istio/mixer/tools/mixgen/cmd/testdata/quota"
	"istio.io/istio/mixer/tools/mixgen/cmd/testdata/report"
	config "path/to/adapter/config/package"
	TestAdapter "path/to/adapter/package"
)

type (
	// Server is basic server interface
	Server interface {
		Addr() string
		Close() error
		PromPort() int
		Run()
	}

	// NoSession models nosession adapter backend.
	NoSession struct {
		listener net.Listener
		shutdown chan error
		server   *grpc.Server

		builder     adapter.HandlerBuilder
		env         adapter.Env
		builderLock sync.RWMutex
		handlerMap  map[string]adapter.Handler
	}
)

var _ istio_mixer_adapter_metricentry.HandleMetricEntryServiceServer = &NoSession{}
var _ istio_mixer_adapter_quota.HandleQuotaServiceServer = &NoSession{}
var _ foo_bar_mylistchecker.HandleMylistCheckerServiceServer = &NoSession{}

func (s *NoSession) updateHandlers(rawcfg []byte) (adapter.Handler, error) {
	cfg := &config.Params{}

	if err := cfg.Unmarshal(rawcfg); err != nil {
		return nil, err
	}

	s.builderLock.Lock()
	defer s.builderLock.Unlock()
	if handler, ok := s.handlerMap[string(rawcfg)]; ok {
		return handler, nil
	}

	s.env.Logger().Infof("Loaded handler with: %v", cfg)
	s.builder.SetAdapterConfig(cfg)

	if ce := s.builder.Validate(); ce != nil {
		return nil, ce
	}

	h, err := s.builder.Build(context.Background(), s.env)
	if err != nil {
		s.env.Logger().Errorf("could not build: %v", err)
		return nil, err
	}
	s.handlerMap[string(rawcfg)] = h
	return h, nil
}

func (s *NoSession) getMetricEntryHandler(rawcfg []byte) (istio_mixer_adapter_metricentry.Handler, error) {
	s.builderLock.RLock()
	if handler, ok := s.handlerMap[string(rawcfg)]; ok {
		h := handler.(istio_mixer_adapter_metricentry.Handler)
		s.builderLock.RUnlock()
		return h, nil
	}
	s.builderLock.RUnlock()
	h, err := s.updateHandlers(rawcfg)
	if err != nil {
		return nil, err
	}

	// establish session
	return h.(istio_mixer_adapter_metricentry.Handler), nil
}

func (s *NoSession) getQuotaHandler(rawcfg []byte) (istio_mixer_adapter_quota.Handler, error) {
	s.builderLock.RLock()
	if handler, ok := s.handlerMap[string(rawcfg)]; ok {
		h := handler.(istio_mixer_adapter_quota.Handler)
		s.builderLock.RUnlock()
		return h, nil
	}
	s.builderLock.RUnlock()
	h, err := s.updateHandlers(rawcfg)
	if err != nil {
		return nil, err
	}

	// establish session
	return h.(istio_mixer_adapter_quota.Handler), nil
}

func (s *NoSession) getMylistCheckerHandler(rawcfg []byte) (foo_bar_mylistchecker.Handler, error) {
	s.builderLock.RLock()
	if handler, ok := s.handlerMap[string(rawcfg)]; ok {
		h := handler.(foo_bar_mylistchecker.Handler)
		s.builderLock.RUnlock()
		return h, nil
	}
	s.builderLock.RUnlock()
	h, err := s.updateHandlers(rawcfg)
	if err != nil {
		return nil, err
	}

	// establish session
	return h.(foo_bar_mylistchecker.Handler), nil
}

func transformistio_mixer_adapter_metricentryResource1Msg(inst *istio_mixer_adapter_metricentry.Resource1Msg) *istio_mixer_adapter_metricentry.Resource1 {
	return &istio_mixer_adapter_metricentry.Resource1{

		Str:         inst.Str,
		SelfRefRes1: transformistio_mixer_adapter_metricentryResource1Msg(inst.SelfRefRes1),
		ResRef2:     transformistio_mixer_adapter_metricentryResource2Msg(inst.ResRef2),
	}
}

func transformistio_mixer_adapter_metricentryResource1MsgSlice(insts []*istio_mixer_adapter_metricentry.Resource1Msg) []*istio_mixer_adapter_metricentry.Resource1 {
	ret := make([]*istio_mixer_adapter_metricentry.Resource1, 0, len(insts))
	for _, inst := range insts {
		ret = append(ret, transformistio_mixer_adapter_metricentryResource1Msg(inst))
	}
	return ret
}

func transformistio_mixer_adapter_metricentryResource1MsgMap(insts map[string]*istio_mixer_adapter_metricentry.Resource1Msg) map[string]*istio_mixer_adapter_metricentry.Resource1 {
	ret := make(map[string]*istio_mixer_adapter_metricentry.Resource1)
	for k, inst := range insts {
		ret[k] = transformistio_mixer_adapter_metricentryResource1Msg(inst)
	}
	return ret
}
func transformistio_mixer_adapter_metricentryResource2Msg(inst *istio_mixer_adapter_metricentry.Resource2Msg) *istio_mixer_adapter_metricentry.Resource2 {
	return &istio_mixer_adapter_metricentry.Resource2{

		Str:  inst.Str,
		Res3: transformistio_mixer_adapter_metricentryResource3Msg(inst.Res3),

		Res3List: transformistio_mixer_adapter_metricentryResource3MsgSlice(inst.Res3List),
		Res3Map:  transformistio_mixer_adapter_metricentryResource3MsgMap(inst.Res3Map),
	}
}

func transformistio_mixer_adapter_metricentryResource2MsgSlice(insts []*istio_mixer_adapter_metricentry.Resource2Msg) []*istio_mixer_adapter_metricentry.Resource2 {
	ret := make([]*istio_mixer_adapter_metricentry.Resource2, 0, len(insts))
	for _, inst := range insts {
		ret = append(ret, transformistio_mixer_adapter_metricentryResource2Msg(inst))
	}
	return ret
}

func transformistio_mixer_adapter_metricentryResource2MsgMap(insts map[string]*istio_mixer_adapter_metricentry.Resource2Msg) map[string]*istio_mixer_adapter_metricentry.Resource2 {
	ret := make(map[string]*istio_mixer_adapter_metricentry.Resource2)
	for k, inst := range insts {
		ret[k] = transformistio_mixer_adapter_metricentryResource2Msg(inst)
	}
	return ret
}
func transformistio_mixer_adapter_metricentryResource3Msg(inst *istio_mixer_adapter_metricentry.Resource3Msg) *istio_mixer_adapter_metricentry.Resource3 {
	tmpTimeStamp, err := proto.TimestampFromProto(inst.TimeStamp.GetValue())
	if err != nil {
		return nil
	}
	tmpDuration, err := proto.DurationFromProto(inst.Duration.GetValue())
	if err != nil {
		return nil
	}
	return &istio_mixer_adapter_metricentry.Resource3{

		Value: transformValue(inst.Value.GetValue()),

		Dimensions:       transformValueMap(inst.Dimensions),
		Int64Primitive:   inst.Int64Primitive,
		BoolPrimitive:    inst.BoolPrimitive,
		DoublePrimitive:  inst.DoublePrimitive,
		StringPrimitive:  inst.StringPrimitive,
		AnotherValueType: transformValue(inst.AnotherValueType.GetValue()),
		TimeStamp:        tmpTimeStamp,
		Duration:         tmpDuration,
	}
}

func transformistio_mixer_adapter_metricentryResource3MsgSlice(insts []*istio_mixer_adapter_metricentry.Resource3Msg) []*istio_mixer_adapter_metricentry.Resource3 {
	ret := make([]*istio_mixer_adapter_metricentry.Resource3, 0, len(insts))
	for _, inst := range insts {
		ret = append(ret, transformistio_mixer_adapter_metricentryResource3Msg(inst))
	}
	return ret
}

func transformistio_mixer_adapter_metricentryResource3MsgMap(insts map[string]*istio_mixer_adapter_metricentry.Resource3Msg) map[string]*istio_mixer_adapter_metricentry.Resource3 {
	ret := make(map[string]*istio_mixer_adapter_metricentry.Resource3)
	for k, inst := range insts {
		ret[k] = transformistio_mixer_adapter_metricentryResource3Msg(inst)
	}
	return ret
}

func istio_mixer_adapter_metricentryInstances(in []*istio_mixer_adapter_metricentry.InstanceMsg) []*istio_mixer_adapter_metricentry.Instance {
	out := make([]*istio_mixer_adapter_metricentry.Instance, 0, len(in))

	for _, inst := range in {
		tmpTimeStamp, err := proto.TimestampFromProto(inst.TimeStamp.GetValue())
		if err != nil {
			continue
		}
		tmpDuration, err := proto.DurationFromProto(inst.Duration.GetValue())
		if err != nil {
			continue
		}
		out = append(out, &istio_mixer_adapter_metricentry.Instance{
			Name: inst.Name,

			Value: transformValue(inst.Value.GetValue()),

			Dimensions:       transformValueMap(inst.Dimensions),
			Int64Primitive:   inst.Int64Primitive,
			BoolPrimitive:    inst.BoolPrimitive,
			DoublePrimitive:  inst.DoublePrimitive,
			StringPrimitive:  inst.StringPrimitive,
			AnotherValueType: transformValue(inst.AnotherValueType.GetValue()),
			TimeStamp:        tmpTimeStamp,
			Duration:         tmpDuration,
			IpAddr:           inst.IpAddr.Value,
			DnsName:          adapter.DNSName(inst.DnsName.Value),
			EmailAddr:        adapter.EmailAddress(inst.EmailAddr.Value),
			Uri:              adapter.URI(inst.Uri.Value),

			Res3List: transformistio_mixer_adapter_metricentryResource3MsgSlice(inst.Res3List),
			Res3Map:  transformistio_mixer_adapter_metricentryResource3MsgMap(inst.Res3Map),
		})
	}
	return out
}

func istio_mixer_adapter_quotaInstance(inst *istio_mixer_adapter_quota.InstanceMsg) *istio_mixer_adapter_quota.Instance {
	tmpTimeStamp, err := proto.TimestampFromProto(inst.TimeStamp.GetValue())
	if err != nil {
		return nil
	}
	tmpDuration, err := proto.DurationFromProto(inst.Duration.GetValue())
	if err != nil {
		return nil
	}
	return &istio_mixer_adapter_quota.Instance{
		Name: inst.Name,

		Dimensions:       transformValueMap(inst.Dimensions),
		Int64Primitive:   inst.Int64Primitive,
		BoolPrimitive:    inst.BoolPrimitive,
		DoublePrimitive:  inst.DoublePrimitive,
		StringPrimitive:  inst.StringPrimitive,
		AnotherValueType: transformValue(inst.AnotherValueType.GetValue()),
		TimeStamp:        tmpTimeStamp,
		Duration:         tmpDuration,
	}
}

func foo_bar_mylistcheckerInstance(inst *foo_bar_mylistchecker.InstanceMsg) *foo_bar_mylistchecker.Instance {
	tmpTimeStamp, err := proto.TimestampFromProto(inst.TimeStamp.GetValue())
	if err != nil {
		return nil
	}
	tmpDuration, err := proto.DurationFromProto(inst.Duration.GetValue())
	if err != nil {
		return nil
	}
	return &foo_bar_mylistchecker.Instance{
		Name: inst.Name,

		CheckExpression: inst.CheckExpression,

		Dimensions:       transformValueMap(inst.Dimensions),
		Int64Primitive:   inst.Int64Primitive,
		BoolPrimitive:    inst.BoolPrimitive,
		DoublePrimitive:  inst.DoublePrimitive,
		StringPrimitive:  inst.StringPrimitive,
		AnotherValueType: transformValue(inst.AnotherValueType.GetValue()),
		TimeStamp:        tmpTimeStamp,
		Duration:         tmpDuration,
	}
}

func transformValueMap(in map[string]*v1beta1.Value) map[string]interface{} {
	out := make(map[string]interface{}, len(in))
	for k, v := range in {
		out[k] = transformValue(v.GetValue())
	}
	return out
}

func transformValueSlice(in []interface{}) []interface{} {
	out := make([]interface{}, 0, len(in))
	for _, inst := range in {
		out = append(out, transformValue(inst))
	}
	return out
}

func transformValue(in interface{}) interface{} {
	switch t := in.(type) {
	case *v1beta1.Value_StringValue:
		return t.StringValue
	case *v1beta1.Value_Int64Value:
		return t.Int64Value
	case *v1beta1.Value_DoubleValue:
		return t.DoubleValue
	case *v1beta1.Value_BoolValue:
		return t.BoolValue
	case *v1beta1.Value_IpAddressValue:
		return t.IpAddressValue.Value
	case *v1beta1.Value_EmailAddressValue:
		return t.EmailAddressValue.Value
	case *v1beta1.Value_UriValue:
		return t.UriValue.Value
	default:
		return fmt.Sprintf("%v", in)
	}
}

// HandleMetricEntry handles 'MetricEntry' instances.
func (s *NoSession) HandleMetricEntry(ctx context.Context, r *istio_mixer_adapter_metricentry.HandleMetricEntryRequest) (*adptModel.ReportResult, error) {
	h, err := s.getMetricEntryHandler(r.AdapterConfig.Value)
	if err != nil {
		return nil, err
	}

	if err = h.HandleMetricEntry(ctx, istio_mixer_adapter_metricentryInstances(r.Instances)); err != nil {
		s.env.Logger().Errorf("Could not process: %v", err)
		return nil, err
	}

	return &adptModel.ReportResult{}, nil
}

// HandleQuota handles 'Quota' instances.
func (s *NoSession) HandleQuota(ctx context.Context, r *istio_mixer_adapter_quota.HandleQuotaRequest) (*adptModel.QuotaResult, error) {
	h, err := s.getQuotaHandler(r.AdapterConfig.Value)
	if err != nil {
		return nil, err
	}

	qi := istio_mixer_adapter_quotaInstance(r.Instance)
	resp := adptModel.QuotaResult{
		Quotas: make(map[string]adptModel.QuotaResult_Result),
	}
	for qt, p := range r.QuotaRequest.Quotas {
		qa := adapter.QuotaArgs{
			DeduplicationID: r.DedupId,
			QuotaAmount:     p.Amount,
			BestEffort:      p.BestEffort,
		}
		qr, err := h.HandleQuota(ctx, qi, qa)
		if err != nil {
			return nil, err
		}
		resp.Quotas[qt] = adptModel.QuotaResult_Result{
			ValidDuration: qr.ValidDuration,
			GrantedAmount: qr.Amount,
		}
	}
	if err != nil {
		s.env.Logger().Errorf("Could not process: %v", err)
		return nil, err
	}
	return &resp, nil
}

// HandleMylistChecker handles 'MylistChecker' instances.
func (s *NoSession) HandleMylistChecker(ctx context.Context, r *foo_bar_mylistchecker.HandleMylistCheckerRequest) (*adptModel.CheckResult, error) {
	h, err := s.getMylistCheckerHandler(r.AdapterConfig.Value)
	if err != nil {
		return nil, err
	}
	inst := foo_bar_mylistcheckerInstance(r.Instance)
	if inst == nil {
		return nil, fmt.Errorf("cannot transform instance")
	}
	cr, err := h.HandleMylistChecker(ctx, inst)
	if err != nil {
		s.env.Logger().Errorf("Could not process: %v", err)
		return nil, err
	}
	return &adptModel.CheckResult{
		Status:        cr.Status,
		ValidDuration: cr.ValidDuration,
		ValidUseCount: cr.ValidUseCount,
	}, nil
}

// Addr returns the listening address of the server
func (s *NoSession) Addr() string {
	return s.listener.Addr().String()
}

// Run starts the server run
func (s *NoSession) Run() {
	s.shutdown = make(chan error, 1)
	go func() {
		err := s.server.Serve(s.listener)

		// notify closer we're done
		s.shutdown <- err
	}()
}

// Wait waits for server to stop
func (s *NoSession) Wait() error {
	if s.shutdown == nil {
		return fmt.Errorf("server not running")
	}

	err := <-s.shutdown
	s.shutdown = nil
	return err
}

// Close gracefully shuts down the server
func (s *NoSession) Close() error {
	if s.shutdown != nil {
		s.server.GracefulStop()
		_ = s.Wait()
	}

	if s.listener != nil {
		_ = s.listener.Close()
	}

	return nil
}

// NewTestAdapterNoSessionServer creates a new no session server based on given args.
func NewTestAdapterNoSessionServer(addr uint16, poolSize int) (*NoSession, error) {
	saddr := fmt.Sprintf(":%d", addr)

	gp := pool.NewGoroutinePool(poolSize, false)
	inf := TestAdapter.GetInfo()
	s := &NoSession{
		builder:    inf.NewBuilder(),
		env:        handler.NewEnv(0, "TestAdapter-nosession", gp),
		handlerMap: make(map[string]adapter.Handler),
	}
	var err error
	if s.listener, err = net.Listen("tcp", saddr); err != nil {
		_ = s.Close()
		return nil, fmt.Errorf("unable to listen on socket: %v", err)
	}

	fmt.Printf("listening on :%v\n", s.listener.Addr())
	s.server = grpc.NewServer()

	istio_mixer_adapter_metricentry.RegisterHandleMetricEntryServiceServer(s.server, s)
	istio_mixer_adapter_quota.RegisterHandleQuotaServiceServer(s.server, s)
	foo_bar_mylistchecker.RegisterHandleMylistCheckerServiceServer(s.server, s)

	return s, nil
}
