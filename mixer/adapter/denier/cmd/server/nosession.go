// Copyright 2018 Istio Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// THIS FILE IS AUTOMATICALLY GENERATED.

package server

import (
	"bytes"
	"context"
	"fmt"
	"net"
	"sync"

	"google.golang.org/grpc"
	adptModel "istio.io/api/mixer/adapter/model/v1beta1"
	"istio.io/api/policy/v1beta1"
	denier "istio.io/istio/mixer/adapter/denier"
	"istio.io/istio/mixer/pkg/adapter"
	"istio.io/istio/mixer/pkg/pool"
	"istio.io/istio/mixer/pkg/runtime/handler"
	"istio.io/istio/mixer/template/checknothing"
	"istio.io/istio/mixer/template/listentry"
	"istio.io/istio/mixer/template/quota"
)

type (
	// Server is basic server interface
	Server interface {
		Addr() string
		Close() error
		PromPort() int
		Run()
	}

	// NoSession models nosession adapter backend.
	NoSession struct {
		listener net.Listener
		shutdown chan error
		server   *grpc.Server

		rawcfg      []byte
		builder     adapter.HandlerBuilder
		env         adapter.Env
		builderLock sync.RWMutex

		checknothingHandler checknothing.Handler
		listentryHandler    listentry.Handler
		quotaHandler        quota.Handler
	}
)

var _ checknothing.HandleCheckNothingServiceServer = &NoSession{}
var _ listentry.HandleListEntryServiceServer = &NoSession{}
var _ quota.HandleQuotaServiceServer = &NoSession{}

func (s *NoSession) updateHandlers(rawcfg []byte) error {

	if ce := s.builder.Validate(); ce != nil {
		return ce
	}

	h, err := s.builder.Build(context.Background(), s.env)
	if err != nil {
		s.env.Logger().Errorf("could not build: %v", err)
		return err
	}
	s.rawcfg = rawcfg

	s.checknothingHandler = h.(checknothing.Handler)
	s.listentryHandler = h.(listentry.Handler)
	s.quotaHandler = h.(quota.Handler)
	return nil
}

func (s *NoSession) getCheckNothingHandler(rawcfg []byte) (checknothing.Handler, error) {
	s.builderLock.RLock()
	if 0 == bytes.Compare(rawcfg, s.rawcfg) {
		h := s.checknothingHandler
		s.builderLock.RUnlock()
		return h, nil
	}
	s.builderLock.RUnlock()
	if err := s.updateHandlers(rawcfg); err != nil {
		return nil, err
	}

	// establish session
	return s.checknothingHandler, nil
}

func (s *NoSession) getListEntryHandler(rawcfg []byte) (listentry.Handler, error) {
	s.builderLock.RLock()
	if 0 == bytes.Compare(rawcfg, s.rawcfg) {
		h := s.listentryHandler
		s.builderLock.RUnlock()
		return h, nil
	}
	s.builderLock.RUnlock()
	if err := s.updateHandlers(rawcfg); err != nil {
		return nil, err
	}

	// establish session
	return s.listentryHandler, nil
}

func (s *NoSession) getQuotaHandler(rawcfg []byte) (quota.Handler, error) {
	s.builderLock.RLock()
	if 0 == bytes.Compare(rawcfg, s.rawcfg) {
		h := s.quotaHandler
		s.builderLock.RUnlock()
		return h, nil
	}
	s.builderLock.RUnlock()
	if err := s.updateHandlers(rawcfg); err != nil {
		return nil, err
	}

	// establish session
	return s.quotaHandler, nil
}

func checknothingInstance(inst *checknothing.InstanceMsg) *checknothing.Instance {
	return &checknothing.Instance{
		Name: inst.Name,
	}
}

func listentryInstance(inst *listentry.InstanceMsg) *listentry.Instance {
	return &listentry.Instance{
		Name: inst.Name,

		Value: inst.Value,
	}
}

func quotaInstance(inst *quota.InstanceMsg) *quota.Instance {
	return &quota.Instance{
		Name: inst.Name,

		Dimensions: decodeDimensions(inst.Dimensions),
	}
}

func decodeDimensions(in map[string]*v1beta1.Value) map[string]interface{} {
	out := make(map[string]interface{}, len(in))
	for k, v := range in {
		out[k] = decodeValue(v.GetValue())
	}
	return out
}

func decodeValue(in interface{}) interface{} {
	switch t := in.(type) {
	case *v1beta1.Value_StringValue:
		return t.StringValue
	case *v1beta1.Value_Int64Value:
		return t.Int64Value
	case *v1beta1.Value_DoubleValue:
		return t.DoubleValue
	default:
		return fmt.Sprintf("%v", in)
	}
}

// HandleCheckNothing ...
func (s *NoSession) HandleCheckNothing(ctx context.Context, r *checknothing.HandleCheckNothingRequest) (*adptModel.CheckResult, error) {
	h, err := s.getCheckNothingHandler(r.AdapterConfig.Value)
	if err != nil {
		return nil, err
	}
	inst := checknothingInstance(r.Instance)
	if inst == nil {
		return nil, fmt.Errorf("cannot transform instance")
	}
	cr, err := h.HandleCheckNothing(ctx, inst)
	if err != nil {
		s.env.Logger().Errorf("Could not process: %v", err)
		return nil, err
	}
	return &adptModel.CheckResult{
		Status:        cr.Status,
		ValidDuration: cr.ValidDuration,
		ValidUseCount: cr.ValidUseCount,
	}, nil
}

// HandleListEntry ...
func (s *NoSession) HandleListEntry(ctx context.Context, r *listentry.HandleListEntryRequest) (*adptModel.CheckResult, error) {
	h, err := s.getListEntryHandler(r.AdapterConfig.Value)
	if err != nil {
		return nil, err
	}
	inst := listentryInstance(r.Instance)
	if inst == nil {
		return nil, fmt.Errorf("cannot transform instance")
	}
	cr, err := h.HandleListEntry(ctx, inst)
	if err != nil {
		s.env.Logger().Errorf("Could not process: %v", err)
		return nil, err
	}
	return &adptModel.CheckResult{
		Status:        cr.Status,
		ValidDuration: cr.ValidDuration,
		ValidUseCount: cr.ValidUseCount,
	}, nil
}

// HandleQuota ...
func (s *NoSession) HandleQuota(ctx context.Context, r *quota.HandleQuotaRequest) (*adptModel.QuotaResult, error) {
	h, err := s.getQuotaHandler(r.AdapterConfig.Value)
	if err != nil {
		return nil, err
	}

	qi := quotaInstance(r.Instance)
	resp := adptModel.QuotaResult{
		Quotas: make(map[string]adptModel.QuotaResult_Result),
	}
	for qt, p := range r.QuotaRequest.Quotas {
		qa := adapter.QuotaArgs{
			DeduplicationID: r.DedupId,
			QuotaAmount:     p.Amount,
			BestEffort:      p.BestEffort,
		}
		qr, err := h.HandleQuota(ctx, qi, qa)
		if err != nil {
			return nil, err
		}
		resp.Quotas[qt] = adptModel.QuotaResult_Result{
			ValidDuration: qr.ValidDuration,
			GrantedAmount: qr.Amount,
		}
	}
	if err != nil {
		s.env.Logger().Errorf("Could not process: %v", err)
		return nil, err
	}
	return &resp, nil
}

// Addr returns the listening address of the server
func (s *NoSession) Addr() string {
	return s.listener.Addr().String()
}

// Run starts the server run
func (s *NoSession) Run() {
	s.shutdown = make(chan error, 1)
	go func() {
		err := s.server.Serve(s.listener)

		// notify closer we're done
		s.shutdown <- err
	}()
}

// Wait waits for server to stop
func (s *NoSession) Wait() error {
	if s.shutdown == nil {
		return fmt.Errorf("server not running")
	}

	err := <-s.shutdown
	s.shutdown = nil
	return err
}

// Close gracefully shuts down the server
func (s *NoSession) Close() error {
	if s.shutdown != nil {
		s.server.GracefulStop()
		_ = s.Wait()
	}

	if s.listener != nil {
		_ = s.listener.Close()
	}

	return nil
}

// NewDenierNoSessionServer creates a new no session server from given args.
func NewDenierNoSessionServer(addr uint16, poolSize int) (*NoSession, error) {
	saddr := fmt.Sprintf(":%d", addr)

	gp := pool.NewGoroutinePool(poolSize, false)
	inf := denier.GetInfo()
	s := &NoSession{
		builder: inf.NewBuilder(),
		env:     handler.NewEnv(0, "denier-nosession", gp),
		rawcfg:  []byte{0xff, 0xff},
	}
	var err error
	if s.listener, err = net.Listen("tcp", saddr); err != nil {
		_ = s.Close()
		return nil, fmt.Errorf("unable to listen on socket: %v", err)
	}

	fmt.Printf("listening on :%v\n", s.listener.Addr())
	s.server = grpc.NewServer()

	checknothing.RegisterHandleCheckNothingServiceServer(s.server, s)
	listentry.RegisterHandleListEntryServiceServer(s.server, s)
	quota.RegisterHandleQuotaServiceServer(s.server, s)

	return s, nil
}
